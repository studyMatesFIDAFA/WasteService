/* Generated by AN DISI Unibo */ 
package it.unibo.waste_truck_mock

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Waste_truck_mock ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "start"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("start") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("WASTE_TRUCK | INIT")
					}
					 transition( edgeName="goto",targetState="indoor_request", cond=doswitch() )
				}	 
				state("indoor_request") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("WASTE_TRUCK | richiesta di prelievo carico")
						request("load_req", "load_req(plastica,9)" ,"wasteservice" )  
					}
					 transition(edgeName="t051",targetState="accepted",cond=whenReply("loadaccept"))
					transition(edgeName="t052",targetState="altrarichiesta",cond=whenReply("loadrejected"))
				}	 
				state("accepted") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("Request accepted")
					}
					 transition( edgeName="goto",targetState="altrarichiesta", cond=doswitch() )
				}	 
				state("altrarichiesta") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("WASTE_TRUCK | richiesta di prelievo carico")
						request("load_req", "load_req(vetro,1)" ,"wasteservice" )  
					}
					 transition(edgeName="t153",targetState="fine",cond=whenReply("loadaccept"))
					transition(edgeName="t154",targetState="rejected",cond=whenReply("loadrejected"))
				}	 
				state("fine") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
					}
				}	 
				state("rejected") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("Request rejected")
					}
				}	 
			}
		}
}
