/* Generated by AN DISI Unibo */ 
package it.unibo.wasteservice

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Wasteservice ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "start"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				WasteServiceConfigurator.setTheConfiguration("./resources/WasteServiceConfig.json")
				var MAXPB = WasteServiceConfigurator.MAXPB
				var MAXGB = WasteServiceConfigurator.MAXGB
				var CurrentPlasticWeight=WasteServiceConfigurator.CurPWeight
				var CurrentGlassWeight=WasteServiceConfigurator.CurGWeight
				var Trolley_home=true	
				var Carico_accettato = false
				var Tipo_carico = ""
				var Peso_carico = 0
				var PercorsoCurr = ""
				val XIndoor = WasteServiceConfigurator.XIndoor
				val YIndoor = WasteServiceConfigurator.YIndoor
				val XVetro =  WasteServiceConfigurator.XGBox
				val YVetro =  WasteServiceConfigurator.YGBox
				val XPlastica = WasteServiceConfigurator.XPBox		
				val YPlastica = WasteServiceConfigurator.YPBox
				val XHome = WasteServiceConfigurator.XHome
				val YHome = WasteServiceConfigurator.YHome
				
				var LastState = "HOME"
		return { //this:ActionBasciFsm
				state("start") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						unibo.kotlin.planner22Util.loadRoomMap( "./mapRoomEmpty.txt"  )
						unibo.kotlin.planner22Util.initAI(  )
						unibo.kotlin.planner22Util.showCurrentRobotState(  )
						println("WASTE SERVICE | START")
					}
					 transition( edgeName="goto",targetState="attesa_load_req", cond=doswitch() )
				}	 
				state("attesa_load_req") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("WASTE SERVICE | ATTESA LOAD REQUEST(CAMION)")
						if( checkMsgContent( Term.createTerm("resume(STATE)"), Term.createTerm("resume(STATE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								forward("resume", "resume($LastState)" ,"trolley" ) 
						}
					}
					 transition(edgeName="t030",targetState="gestisci_richiesta",cond=whenRequest("load_req"))
					transition(edgeName="t031",targetState="stopped",cond=whenDispatch("stop"))
				}	 
				state("gestisci_richiesta") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("WASTE SERVICE | GESTIONE RICHIESTA")
						if( checkMsgContent( Term.createTerm("load_req(TYPE,WEIGHT)"), Term.createTerm("load_req(TYPE,WEIGHT)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												Tipo_carico = payloadArg(0)
												Peso_carico = payloadArg(1).toInt()
												if (Tipo_carico  == "plastica") {
													Carico_accettato = (CurrentPlasticWeight + Peso_carico <= MAXPB)
												} else if (Tipo_carico  == "vetro") {
													Carico_accettato = ( CurrentGlassWeight + Peso_carico <= MAXGB)
												} else {
													Carico_accettato = false
													println("WASTE SERVICE | Tipo sbagliato")
												}
								if(  ! Carico_accettato  
								 ){answer("load_req", "loadrejected", "loadrejected($Tipo_carico,$Peso_carico)"   )  
								}
						}
					}
					 transition( edgeName="goto",targetState="attiva_indoor", cond=doswitchGuarded({ Carico_accettato  
					}) )
					transition( edgeName="goto",targetState="go_home", cond=doswitchGuarded({! ( Carico_accettato  
					) }) )
				}	 
				state("attiva_indoor") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("WASTE SERVICE | ATTIVA INDOOR")
						 
									Trolley_home = false
									LastState = "GO_INDOOR"
									
						unibo.kotlin.planner22Util.setGoal( XIndoor, YIndoor  )
						 PercorsoCurr = unibo.kotlin.planner22Util.doPlan().toString()  //List<aima.core.agent.Action>  [w, w, l, w] 
									.replace(" ","")
									.replace(",","")
									.replace("[","")
									.replace("]","")
						request("go_indoor", "go_indoor($PercorsoCurr)" ,"trolley" )  
					}
					 transition(edgeName="t132",targetState="attiva_pickup",cond=whenReply("indoor_done"))
					transition(edgeName="t133",targetState="stopped",cond=whenDispatch("stop"))
				}	 
				state("attiva_pickup") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("WASTE SERVICE | ATTIVA PICKUP")
						if( checkMsgContent( Term.createTerm("resume(STATE)"), Term.createTerm("resume(STATE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								forward("resume", "resume($LastState)" ,"trolley" ) 
						}
						request("pickup", "pickup(arg)" ,"trolley" )  
						 LastState = "PICKUP" 
					}
					 transition(edgeName="t134",targetState="attiva_trasferimento",cond=whenReply("pickup_done"))
					transition(edgeName="t135",targetState="stopped",cond=whenDispatch("stop"))
				}	 
				state("attiva_trasferimento") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("WASTE SERVICE | ATTIVA TRASFERIMENTO (IL CAMION LIBERA INDOOR)")
						if( checkMsgContent( Term.createTerm("resume(STATE)"), Term.createTerm("resume(STATE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								forward("resume", "resume($LastState)" ,"trolley" ) 
						}
						if( checkMsgContent( Term.createTerm("pickup_done(ok)"), Term.createTerm("pickup_done(ok)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								answer("load_req", "loadaccept", "loadaccept($Tipo_carico,$Peso_carico)"   )  
						}
						unibo.kotlin.planner22Util.updateMapWithPath( PercorsoCurr  )
						unibo.kotlin.planner22Util.showCurrentRobotState(  )
						
									if (Tipo_carico  == "plastica") {
											CurrentPlasticWeight = CurrentPlasticWeight + Peso_carico
						unibo.kotlin.planner22Util.setGoal( XPlastica, YPlastica  )
								
									} else if (Tipo_carico  == "vetro") {
											CurrentGlassWeight = CurrentGlassWeight + Peso_carico
						unibo.kotlin.planner22Util.setGoal( XVetro, YVetro  )
						
									}
								
								PercorsoCurr = unibo.kotlin.planner22Util.doPlan().toString() 
									.replace(" ","")
									.replace(",","")
									.replace("[","")
									.replace("]","")
						request("trasf", "trasf($PercorsoCurr)" ,"trolley" )  
						 LastState = "TRASFERIMENTO"  
					}
					 transition(edgeName="t236",targetState="attiva_deposito",cond=whenReply("trasf_done"))
					transition(edgeName="t237",targetState="stopped",cond=whenDispatch("stop"))
				}	 
				state("attiva_deposito") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("WASTE SERVICE | ATTIVA DEPOSITO")
						if( checkMsgContent( Term.createTerm("resume(STATE)"), Term.createTerm("resume(STATE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								forward("resume", "resume($LastState)" ,"trolley" ) 
						}
						unibo.kotlin.planner22Util.updateMapWithPath( PercorsoCurr  )
						unibo.kotlin.planner22Util.showCurrentRobotState(  )
						request("deposit", "deposit(arg)" ,"trolley" )  
						 LastState = "DEPOSITO"  
					}
					 transition(edgeName="t338",targetState="controlla_req",cond=whenReply("deposit_done"))
					transition(edgeName="t339",targetState="stopped",cond=whenDispatch("stop"))
				}	 
				state("controlla_req") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("WASTE SERVICE | CONTROLLA NUOVE RICHIESTE")
						if( checkMsgContent( Term.createTerm("resume(STATE)"), Term.createTerm("resume(STATE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								forward("resume", "resume($LastState)" ,"trolley" ) 
						}
						stateTimer = TimerActor("timer_controlla_req", 
							scope, context!!, "local_tout_wasteservice_controlla_req", 100.toLong() )
					}
					 transition(edgeName="t440",targetState="go_home",cond=whenTimeout("local_tout_wasteservice_controlla_req"))   
					transition(edgeName="t441",targetState="gestisci_richiesta",cond=whenRequest("load_req"))
					transition(edgeName="t442",targetState="stopped",cond=whenDispatch("stop"))
				}	 
				state("go_home") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("WASTE SERVICE | GO HOME")
						unibo.kotlin.planner22Util.setGoal( XHome, YHome  )
						
								PercorsoCurr = unibo.kotlin.planner22Util.doPlan().toString() 
									.replace(" ","")
									.replace(",","")
									.replace("[","")
									.replace("]","")
						request("ritorno_home", "ritorno_home($PercorsoCurr)" ,"trolley" )  
						 
									Trolley_home = true
									LastState = "RITORNO_HOME"
					}
					 transition(edgeName="t543",targetState="ritorno_done",cond=whenReply("home_done"))
					transition(edgeName="t544",targetState="stopped",cond=whenDispatch("stop"))
				}	 
				state("ritorno_done") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("resume(STATE)"), Term.createTerm("resume(STATE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								forward("resume", "resume($LastState)" ,"trolley" ) 
						}
						unibo.kotlin.planner22Util.updateMapWithPath( PercorsoCurr  )
						unibo.kotlin.planner22Util.showCurrentRobotState(  )
						 LastState = "HOME"  
					}
					 transition( edgeName="goto",targetState="attesa_load_req", cond=doswitch() )
				}	 
				state("stopped") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("WASTE SERVICE | STOPPED")
						forward("stop", "stop(STOP)" ,"trolley" ) 
					}
					 transition(edgeName="t645",targetState="attesa_load_req",cond=whenDispatchGuarded("resume",{ LastState == "HOME"  
					}))
					transition(edgeName="t646",targetState="attiva_pickup",cond=whenDispatchGuarded("resume",{ LastState == "GO_INDOOR"  
					}))
					transition(edgeName="t647",targetState="attiva_trasferimento",cond=whenDispatchGuarded("resume",{ LastState == "PICKUP"  
					}))
					transition(edgeName="t648",targetState="attiva_deposito",cond=whenDispatchGuarded("resume",{ LastState == "TRASFERIMENTO"  
					}))
					transition(edgeName="t649",targetState="controlla_req",cond=whenDispatchGuarded("resume",{ LastState == "DEPOSITO"  
					}))
					transition(edgeName="t650",targetState="ritorno_done",cond=whenDispatchGuarded("resume",{ LastState == "RITORNO_HOME"  
					}))
				}	 
			}
		}
}
