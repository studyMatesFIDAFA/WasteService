/* Generated by AN DISI Unibo */ 
package it.unibo.sonar

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Sonar ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "stopped"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		return { //this:ActionBasciFsm
				state("stopped") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						forward("stop", "stop(STOP)" ,"wasteservice" ) 
					}
					 transition( edgeName="goto",targetState="resumed", cond=doswitch() )
				}	 
				state("resumed") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						forward("resume", "resume(RES)" ,"wasteservice" ) 
					}
				}	 
			}
		}
}
