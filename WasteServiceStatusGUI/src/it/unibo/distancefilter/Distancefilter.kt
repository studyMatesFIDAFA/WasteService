/* Generated by AN DISI Unibo */ 
package it.unibo.distancefilter

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Distancefilter ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		
				RaspberryConfigurator.setTheConfiguration("./raspberryConfigurator.json")
				val LimitDistance = RaspberryConfigurator.dlimit
				var Sospeso = false
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("Avvio distancefilter")
					}
					 transition(edgeName="t157",targetState="gestiscidistanza",cond=whenEvent("sonardata"))
				}	 
				state("gestiscidistanza") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("distance(V)"), Term.createTerm("distance(V)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												var Distance = payloadArg(0).toInt()
								println("-->sonardata $Distance")
								
												if( Distance < LimitDistance && !Sospeso){
									 			Sospeso=true
								forward("stop", "stop($Distance)" ,"wasteservice" ) 
								
												} else if(Distance>= LimitDistance && Sospeso){
												Sospeso=false 
								forward("resume", "resume($Distance)" ,"wasteservice" ) 
								
												}
						}
					}
					 transition(edgeName="t258",targetState="gestiscidistanza",cond=whenEvent("sonardata"))
				}	 
			}
		}
}
