/* Generated by AN DISI Unibo */ 
package it.unibo.waste_service

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Waste_service ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "start"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				var MAXPB = 10
				var MAXPG = 10
				var Kg_plastica=MAXPB
				var Kg_vetro=MAXPG
				var Trolley_occupato=false	
				var Carico_accettato = false
				var Tipo_carico = ""
				var Peso_carico = 0
		return { //this:ActionBasciFsm
				state("start") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("WASTE SERVICE | START")
					}
					 transition( edgeName="goto",targetState="attesa_camion", cond=doswitch() )
				}	 
				state("attesa_camion") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("WASTE SERVICE | ATTESA CAMION")
						if( checkMsgContent( Term.createTerm("other_load(ARG)"), Term.createTerm("other_load(ARG)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 Trolley_occupato = false  
								answer("other_load", "no", "no(ARG)"   )  
						}
					}
					 transition(edgeName="t03",targetState="gestisci_richiesta",cond=whenRequest("load_req"))
					transition(edgeName="t04",targetState="attesa_camion",cond=whenRequest("other_load"))
				}	 
				state("gestisci_richiesta") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("WASTE SERVICE | GESTIONE RICHIESTA")
						if( checkMsgContent( Term.createTerm("load_req(TIPO,PESO)"), Term.createTerm("load_req(TIPO,PESO)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												Tipo_carico = payloadArg(0)
												Peso_carico = payloadArg(1).toInt()
								if(  Tipo_carico.equals("P")  
								 ){if( Kg_plastica-Peso_carico>=0 
								 ){answer("load_req", "loadaccepted", "loadaccepted($Tipo_carico,$Peso_carico)"   )  
								
														Kg_plastica = Kg_plastica - Peso_carico
														Carico_accettato=true
								}
								else
								 {answer("load_req", "loadrejected", "loadrejected($Tipo_carico,$Peso_carico)"   )  
								 
								 						Carico_accettato=false
								 }
								}
								else
								 {if(  Tipo_carico.equals("G")  
								  ){if( Kg_vetro-Peso_carico>=0 
								  ){answer("load_req", "loadaccepted", "loadaccepted($Tipo_carico,$Peso_carico)"   )  
								 
								 						Kg_vetro = Kg_vetro - Peso_carico
								 						Carico_accettato=true
								 }
								 else
								  {answer("load_req", "loadrejected", "loadrejected($Tipo_carico,$Peso_carico)"   )  
								  
								  							Carico_accettato=false
								  }
								 }
								 else
								  {println("WASTE SERVICE | ERRORE: TIPO CARICO SBAGLIATO")
								  }
								 }
						}
					}
					 transition( edgeName="goto",targetState="gestione_trolley", cond=doswitchGuarded({ Carico_accettato  
					}) )
					transition( edgeName="goto",targetState="attesa_camion", cond=doswitchGuarded({! ( Carico_accettato  
					) }) )
				}	 
				state("gestione_trolley") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("WASTE SERVICE | GESTIONE TROLLEY")
						if(  Trolley_occupato.equals(false)  
						 ){println("WASTE SERVICE | Gestico trolley LIBERO")
						if(  Tipo_carico.equals("G")  
						 ){forward("start_trasf", "start_trasf(6,0,$Tipo_carico,$Peso_carico)" ,"trolley" ) 
						}
						else
						 {forward("start_trasf", "start_trasf(6,6,$Tipo_carico,$Peso_carico)" ,"trolley" ) 
						 }
						}
					}
					 transition( edgeName="goto",targetState="trolley_occupato", cond=doswitchGuarded({ Trolley_occupato  
					}) )
					transition( edgeName="goto",targetState="attesa_trolley", cond=doswitchGuarded({! ( Trolley_occupato  
					) }) )
				}	 
				state("trolley_occupato") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("WASTE SERVICE | TROLLEY OCCUPATO")
					}
					 transition(edgeName="t25",targetState="attesa_trolley",cond=whenRequest("other_load"))
				}	 
				state("attesa_trolley") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("WASTE SERVICE | ATTESA TROLLEY")
						if( checkMsgContent( Term.createTerm("other_load(ARG)"), Term.createTerm("other_load(ARG)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								if(  Tipo_carico.equals("P")  
								 ){answer("other_load", "yes", "yes(6,6,$Tipo_carico,$Peso_carico)"   )  
								}
								else
								 {answer("other_load", "yes", "yes(6,0,$Tipo_carico,$Peso_carico)"   )  
								 }
						}
						
									Trolley_occupato = true
									var Kg_occ_p = MAXPB-Kg_plastica
									var Kg_occ_g = MAXPG-Kg_vetro
						emit("waste_state", "waste_state($Kg_occ_p,$Kg_occ_g)" ) 
					}
					 transition(edgeName="t16",targetState="attesa_camion",cond=whenEvent("load_pickup"))
				}	 
			}
		}
}
