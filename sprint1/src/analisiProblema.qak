System analisi_problema

Request load_req : load_req(TYPE,WEIGHT)
Reply loadaccept : loadaccept(TYPE,WEIGHT)
Reply loadrejected : loadrejected(TYPE,WEIGHT)

Request start_trasf : start_trasf(TYPE)
Reply load_pickup : load_pickup(ok)


Context ctxAnalisiProblema ip [ host="localhost" port=8050]


QActor trolley context ctxAnalisiProblema {
	
	[#
		val IndoorX = 0
		val IndoorY = 10
		val HomeX = 0
		val HomeY = 0
		val GlassX = 10
		val GlassY = 0
		val PlasticX = 10
		val PlasticY = 10
		
		
		var Tipo_carico = ""
		val DelayHome=2000L
		val DelayBox=3000L
	#]
	
	State start initial{
		printCurrentMessage
		println("TROLLEY | START")
	}
	Goto home
	
	State home{
		printCurrentMessage
		println("TROLLEY | HOME")
		println("TROLLEY | Attendo un compito dal Waste Service")
	}
	Transition t0 whenRequest start_trasf -> trasferimento_indoor
	
	State trasferimento_indoor{
		printCurrentMessage
		println("TROLLEY | TRASFERIMENTO INDOOR")
		onMsg(start_trasf:start_trasf(TYPE)){
			[#
				Tipo_carico = payloadArg(0)
			#]
		}
		delayVar DelayHome
	}
	Goto pickup
	
	State pickup{
		printCurrentMessage
		println("TROLLEY | PICKUP")
		replyTo start_trasf with load_pickup : load_pickup(ok)
	}
	Goto trasferimento_e_deposito
	
	State trasferimento_e_deposito{
		printCurrentMessage
		println("TROLLEY | TRASFERIMENTO E DEPOSITO CARICO")
		if [# Tipo_carico.equals("plastica") #]{
			println("TROLLEY | Direzione PLASTIC BOX")
		}
		else {
			println("TROLLEY | Direzione GLASS BOX")
		}
		delayVar DelayBox
		println("TROLLEY | FINE TRASFERIMENTO $Tipo_carico")
	}
	Transition t1 whenTime 50 -> ritorno_home
				whenRequest start_trasf -> trasferimento_indoor
	
				
	State ritorno_home{
		printCurrentMessage
		println("TROLLEY | RITORNO HOME")
		delayVar DelayHome
	}
	Goto home
}

QActor waste_service context ctxAnalisiProblema{
	[#
		var MAXPB = 10
		var MAXGB = 10
		var CurrentPlasticWeight=0
		var CurrentGlassWeight=0
		var Trolley_occupato=false	
		var Carico_accettato = false
		var Tipo_carico = ""
		var Peso_carico = 0
	#]
	
	State start initial{
		printCurrentMessage
		println("WASTE SERVICE | START")
	}
	Goto attesa_load_req
	
	State attesa_load_req{
		printCurrentMessage
		println("WASTE SERVICE | ATTESA LOAD REQUEST(CAMION)")
	}
	Transition t0 whenRequest load_req -> gestisci_richiesta
	
	State gestisci_richiesta{
		printCurrentMessage
		println("WASTE SERVICE | GESTIONE RICHIESTA")
		onMsg(load_req : load_req(TYPE, WEIGHT)){[#
				Tipo_carico = payloadArg(0)
				Peso_carico = payloadArg(1).toInt()
				if (Tipo_carico  == "plastica") {
					Carico_accettato = (CurrentPlasticWeight + Peso_carico <= MAXPB)
				} else if (Tipo_carico  == "vetro") {
					Carico_accettato = ( CurrentGlassWeight + Peso_carico <= MAXGB)
				} else {
					Carico_accettato = false
					println("WASTE SERVICE | Tipo sbagliato")
				}
			#]
			if [# ! Carico_accettato #] {
				replyTo load_req with loadrejected : loadrejected(Type,Weight)
			}
		}
	}
	Goto attiva_deposito if [# Carico_accettato #] else attesa_load_req 
	
	State attiva_deposito{
		printCurrentMessage
		println("WASTE SERVICE | ATTIVA DEPOSITO")
		request trolley -m start_trasf : start_trasf($Tipo_carico)
	}
	Transition t1 whenReply load_pickup -> libera_indoor
	
	State libera_indoor{
		printCurrentMessage
		println("WASTE SERVICE | LIBERA INDOOR")
		onMsg (load_pickup: load_pickup(ok)){
			replyTo load_req with loadaccept : yes($Tipo_carico, $Peso_carico)	
		}
		[#
			if (Tipo_carico  == "plastica") {
					CurrentPlasticWeight = CurrentPlasticWeight + Peso_carico
			} else if (Tipo_carico  == "vetro") {
					CurrentGlassWeight = CurrentGlassWeight + Peso_carico
			}
		#]
		
	}
	Goto attesa_load_req
}



QActor wastetruckmock context ctxAnalisiProblema {
	State start initial {
		printCurrentMessage
		println("WASTE TRUCK | START")
	} Goto camion_req
	
	State camion_req {
		printCurrentMessage
		[# 
			var Peso_carico    = kotlin.random.Random.nextInt(0,10)
			var TipoInt = kotlin.random.Random.nextInt(0,1)
			var Tipo_carico    = ""
			
			if(TipoInt == 0) 
				Tipo_carico = "vetro"
			else
				Tipo_carico = "plastica"
		#]
		println("WASTE TRUCK | CAMION REQ ($Tipo_carico, $Peso_carico)")
		request waste_service -m load_req : load_req($Tipo_carico, $Peso_carico)
	} Transition t0 whenReply loadaccept -> camion_accepted
					whenReply loadrejected -> camion_rejected
			
	State camion_rejected{
		printCurrentMessage
		println("WASTE TRUCK | CAMION RIFIUTATO")
	}Goto fine
			
	State camion_accepted {
		printCurrentMessage
		println("WASTE TRUCK | CAMION 1 ACCETTATO CIAOOO")
	} Goto fine
	
	State fine {
		printCurrentMessage
		println("WASTE TRUCK | FINE!")
	}
				
}

QActor wastetruckmock2 context ctxAnalisiProblema {
	State start initial {
		delay 250
		printCurrentMessage
		println("WASTE TRUCK 2 | START")
	} Goto camion_req
	
	State camion_req {
		printCurrentMessage
		[# 
			var Peso_carico    = kotlin.random.Random.nextInt(0,10)
			var TipoInt = kotlin.random.Random.nextInt(0,1)
			var Tipo_carico    = ""
			
			if(TipoInt == 0) 
				Tipo_carico = "vetro"
			else
				Tipo_carico = "plastica"
		#]
		println("WASTE TRUCK 2 | CAMION REQ ($Tipo_carico, $Peso_carico)")
		request waste_service -m load_req : load_req($Tipo_carico, $Peso_carico)
	} Transition t0 whenReply loadaccept -> camion_accepted
					whenReply loadrejected -> camion_rejected
			
	State camion_rejected{
		printCurrentMessage
		println("WASTE TRUCK 2 | CAMION 2 RIFIUTATO")
	}Goto fine
			
	State camion_accepted {
		printCurrentMessage
		println("WASTE TRUCK 2 | CAMION 2 ACCETTATO  CIAOOO")
	} Goto fine
	
	State fine {
		printCurrentMessage
		println("WASTE TRUCK 2 | FINE!")
	}
				
}


