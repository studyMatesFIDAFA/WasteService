/* Generated by AN DISI Unibo */ 
package it.unibo.waste_service

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Waste_service ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "attesa_load_req"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				var CurrentPlasticWeight = 0
				var CurrentGlassWeight   = 0
				val MAXP				 = 15
				val MAXG				 = 15
				var Accepted = false
		return { //this:ActionBasciFsm
				state("attesa_load_req") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
					}
					 transition(edgeName="t02",targetState="gestisci_richiesta",cond=whenRequest("load_req"))
				}	 
				state("gestisci_richiesta") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("WASTE SERVICE | Gestisco richiesta")
						if( checkMsgContent( Term.createTerm("load_req(TYPE,WEIGHT)"), Term.createTerm("load_req(TYPE,WEIGHT)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												val Type = payloadArg(0)
												val Weight = payloadArg(1).toInt()
												if (Type == "plastica") {
													Accepted = (CurrentPlasticWeight + Weight <= MAXP)
												} else if (Type == "vetro") {
													Accepted = ( CurrentGlassWeight + Weight <= MAXG)
												} else {
													Accepted = false
													println("WASTE SERVICE | Tipo sbagliato")
												}
								if(  Accepted  
								 ){answer("load_req", "loadaccept", "loadaccept(Type,Weight)"   )  
								}
								else
								 {answer("load_req", "loadrejected", "loadrejected(Type,Weight)"   )  
								 }
						}
					}
					 transition( edgeName="goto",targetState="attesa_load_req", cond=doswitch() )
				}	 
			}
		}
}
