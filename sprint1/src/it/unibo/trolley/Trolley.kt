/* Generated by AN DISI Unibo */ 
package it.unibo.trolley

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Trolley ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "start"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				var Stato="home"
				var X=0
				var Y=0
				var Tipo_carico = ""
				var Peso_carico = 0
				val DelayHome=2000L
				val DelayBox=3000L
		return { //this:ActionBasciFsm
				state("start") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("INITIAL: attivazione del sistema")
					}
					 transition( edgeName="goto",targetState="home", cond=doswitch() )
				}	 
				state("home") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("HOME")
						Stato = "home" 
						emit("trolley_state", "trolley_state($Stato)" ) 
					}
					 transition(edgeName="t00",targetState="trasferimento_indoor",cond=whenDispatch("start_trasf"))
				}	 
				state("trasferimento_indoor") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						 Stato="in_movimento"  
						emit("trolley_state", "trolley_state($Stato)" ) 
						if( checkMsgContent( Term.createTerm("start_trasf(X,Y,TIPO,PESO)"), Term.createTerm("start_trasf(X,Y,TIPO,PESO)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												X=payloadArg(0).toInt()
												Y=payloadArg(1).toInt()
												Tipo_carico = payloadArg(2)
												Peso_carico = payloadArg(3).toInt()
						}
						if( checkMsgContent( Term.createTerm("yes(X,Y,TIPO,PESO)"), Term.createTerm("yes(X,Y,TIPO,PESO)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												X=payloadArg(0).toInt()
												Y=payloadArg(1).toInt()
												Tipo_carico = payloadArg(2)
												Peso_carico = payloadArg(3).toInt()
						}
						println("TRASFERIMENTO_INDOOR...")
						delay(DelayHome)
					}
					 transition( edgeName="goto",targetState="carico_rifiuti", cond=doswitch() )
				}	 
				state("carico_rifiuti") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						 Stato="fermo"  
						emit("trolley_state", "trolley_state($Stato)" ) 
						println("CARICO RIFIUTI=RUSCO...")
						emit("load_pickup", "load_pickup($Tipo_carico,$Peso_carico)" ) 
					}
					 transition( edgeName="goto",targetState="trasferimento_carico", cond=doswitch() )
				}	 
				state("trasferimento_carico") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						 Stato="in_movimento"  
						emit("trolley_state", "trolley_state($Stato)" ) 
						println("TRASFERIMENTO RUSCO...")
						delay(DelayBox)
						 Stato="fermo"  
						emit("trolley_state", "trolley_state($Stato)" ) 
						println("FINE TRASFERIMENTO $Tipo_carico $Peso_carico")
						request("other_load", "other_load(x)" ,"waste_service" )  
					}
					 transition(edgeName="t11",targetState="trasferimento_indoor",cond=whenReply("yes"))
					transition(edgeName="t12",targetState="ritorno_home",cond=whenReply("no"))
				}	 
				state("ritorno_home") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						 Stato="in_movimento"  
						emit("trolley_state", "trolley_state($Stato)" ) 
						println("RITORNO HOME...")
						delay(DelayHome)
					}
					 transition( edgeName="goto",targetState="home", cond=doswitch() )
				}	 
			}
		}
}
