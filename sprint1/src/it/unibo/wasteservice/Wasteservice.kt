/* Generated by AN DISI Unibo */ 
package it.unibo.wasteservice

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Wasteservice ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "start"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				var MAXPB = 10
				var MAXGB = 10
				var CurrentPlasticWeight=0
				var CurrentGlassWeight=0
				var Trolley_home=true	
				var Carico_accettato = false
				var Tipo_carico = ""
				var Peso_carico = 0
				val Percorso_vetro = "lwwwwwwlwwwwww"
				val Percorso_plastica = "lwwwwww"
				val Percorso_home = "lwwwwww"
				val Percorso_indoor = "wwwwww"
				var PercorsoCurr = ""
		return { //this:ActionBasciFsm
				state("start") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("WASTE SERVICE | START")
					}
					 transition( edgeName="goto",targetState="attesa_load_req", cond=doswitch() )
				}	 
				state("attesa_load_req") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("WASTE SERVICE | ATTESA LOAD REQUEST(CAMION)")
					}
					 transition(edgeName="t011",targetState="gestisci_richiesta",cond=whenRequest("load_req"))
				}	 
				state("gestisci_richiesta") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("WASTE SERVICE | GESTIONE RICHIESTA")
						if( checkMsgContent( Term.createTerm("load_req(TYPE,WEIGHT)"), Term.createTerm("load_req(TYPE,WEIGHT)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												Tipo_carico = payloadArg(0)
												Peso_carico = payloadArg(1).toInt()
												if (Tipo_carico  == "plastica") {
													Carico_accettato = (CurrentPlasticWeight + Peso_carico <= MAXPB)
												} else if (Tipo_carico  == "vetro") {
													Carico_accettato = ( CurrentGlassWeight + Peso_carico <= MAXGB)
												} else {
													Carico_accettato = false
													println("WASTE SERVICE | Tipo sbagliato")
												}
								if(  ! Carico_accettato  
								 ){answer("load_req", "loadrejected", "loadrejected($Tipo_carico,$Peso_carico)"   )  
								if(  ! Trolley_home  
								 ){forward("ritorno_home", "ritorno_home($Percorso_home)" ,"trolley" ) 
								 Trolley_home = true  
								}
								}
						}
					}
					 transition( edgeName="goto",targetState="attiva_pickup", cond=doswitchGuarded({ Carico_accettato  
					}) )
					transition( edgeName="goto",targetState="attesa_load_req", cond=doswitchGuarded({! ( Carico_accettato  
					) }) )
				}	 
				state("attiva_pickup") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("WASTE SERVICE | ATTIVA DEPOSITO")
						 Trolley_home = false  
						request("pickup", "pickup($Percorso_indoor)" ,"trolley" )  
					}
					 transition(edgeName="t112",targetState="attiva_trasferimento",cond=whenReply("pickup_done"))
				}	 
				state("attiva_trasferimento") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("WASTE SERVICE | ATTIVA TRASFERIMENTO (IL CAMION LIBERA INDOOR)")
						if( checkMsgContent( Term.createTerm("pickup_done(ok)"), Term.createTerm("pickup_done(ok)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								answer("load_req", "loadaccept", "loadaccept($Tipo_carico,$Peso_carico)"   )  
						}
						
									if (Tipo_carico  == "plastica") {
											CurrentPlasticWeight = CurrentPlasticWeight + Peso_carico
											PercorsoCurr = Percorso_plastica
									} else if (Tipo_carico  == "vetro") {
											CurrentGlassWeight = CurrentGlassWeight + Peso_carico
											PercorsoCurr = Percorso_vetro
									}
						request("trasf", "trasf($PercorsoCurr)" ,"trolley" )  
					}
					 transition(edgeName="t213",targetState="attiva_deposito",cond=whenReply("trasf_done"))
				}	 
				state("attiva_deposito") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("WASTE SERVICE | ATTIVA DEPOSITO")
						request("deposit", "deposit(arg)" ,"trolley" )  
					}
					 transition(edgeName="t314",targetState="controlla_req",cond=whenReply("deposit_done"))
				}	 
				state("controlla_req") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("WASTE SERVICE | CONTROLLA NUOVE RICHIESTE")
						stateTimer = TimerActor("timer_controlla_req", 
							scope, context!!, "local_tout_wasteservice_controlla_req", 100.toLong() )
					}
					 transition(edgeName="t415",targetState="go_home",cond=whenTimeout("local_tout_wasteservice_controlla_req"))   
					transition(edgeName="t416",targetState="gestisci_richiesta",cond=whenRequest("load_req"))
				}	 
				state("go_home") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("WASTE SERVICE | GO HOME")
						forward("ritorno_home", "ritorno_home($Percorso_home)" ,"trolley" ) 
						 Trolley_home = true  
					}
					 transition( edgeName="goto",targetState="attesa_load_req", cond=doswitch() )
				}	 
			}
		}
}
