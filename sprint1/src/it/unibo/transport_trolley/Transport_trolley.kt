/* Generated by AN DISI Unibo */ 
package it.unibo.transport_trolley

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Transport_trolley ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "home"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 var Another = false  
		return { //this:ActionBasciFsm
				state("home") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println(" TROLLEY | HOME ")
					}
					 transition( edgeName="goto",targetState="pickup_load_from_indoor", cond=doswitch() )
				}	 
				state("pickup_load_from_indoor") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println(" TROLLEY | CARICA un WASTE-LOAD da INDOOR ")
					}
					 transition( edgeName="goto",targetState="deposit_load_incontainer", cond=doswitch() )
				}	 
				state("deposit_load_incontainer") { //this:State
					action { //it:State
						
									Another = ((0..1).random())==1
						println("$name in ${currentState.stateName} | $currentMsg")
						println(" TROLLEY | deposito WASTE-LOAD nel CONTAINER ")
					}
					 transition( edgeName="goto",targetState="pickup_load_from_indoor", cond=doswitchGuarded({ Another  
					}) )
					transition( edgeName="goto",targetState="home", cond=doswitchGuarded({! ( Another  
					) }) )
				}	 
			}
		}
}
