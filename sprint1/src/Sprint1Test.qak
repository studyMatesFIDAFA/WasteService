System sprint1

Request load_req : load_req(TIPO, PESO)
Reply loadaccepted: loadaccepted(TIPO, PESO)
Reply loadrejected: loadrejected(TIPO, PESO)
Dispatch start_trasf:start_trasf(X,Y,TIPO, PESO)
Request other_load: other_load(ARG)
Reply yes : yes(X,Y,TIPO, PESO)
Reply no : no(ARG)
Event load_pickup: load_pickup(TIPO, PESO)
Event waste_state:waste_state(PESOP, PESOG)
Event trolley_state : trolley_state(STATO)

Context ctxWasteService ip [host="localhost" port=8050]

QActor trolley context ctxWasteService {
	
	[#
		var Stato="home"
		var X=0
		var Y=0
		var Tipo_carico = ""
		var Peso_carico = 0
		val DelayHome=2000L
		val DelayBox=3000L
	#]
	
	State start initial{
		printCurrentMessage
		println("INITIAL: attivazione del sistema")
	}
	Goto home
	
	State home{
		printCurrentMessage
		println("HOME")
		[#Stato = "home"#]
		emit trolley_state : trolley_state($Stato)
	}
	Transition t0 whenMsg start_trasf -> trasferimento_indoor
	
	State trasferimento_indoor{
		printCurrentMessage
		[# Stato="in_movimento" #]
		emit trolley_state : trolley_state($Stato)
		onMsg(start_trasf:start_trasf(X,Y,TIPO, PESO)){
			[#
				X=payloadArg(0).toInt()
				Y=payloadArg(1).toInt()
				Tipo_carico = payloadArg(2)
				Peso_carico = payloadArg(3).toInt()
			#]
		}
		onMsg(yes : yes(X,Y,TIPO, PESO)){
			[#
				X=payloadArg(0).toInt()
				Y=payloadArg(1).toInt()
				Tipo_carico = payloadArg(2)
				Peso_carico = payloadArg(3).toInt()
			#]
		}
		println("TRASFERIMENTO_INDOOR...")
		delayVar DelayHome
	}
	Goto carico_rifiuti
	
	State carico_rifiuti{
		printCurrentMessage
		[# Stato="fermo" #]
		emit trolley_state : trolley_state($Stato)
		println("CARICO RIFIUTI=RUSCO...")
		emit load_pickup: load_pickup($Tipo_carico, $Peso_carico)
	}
	Goto trasferimento_carico
	
	State trasferimento_carico{
		printCurrentMessage
		[# Stato="in_movimento" #]
		emit trolley_state : trolley_state($Stato)
		println("TRASFERIMENTO RUSCO...")
		delayVar DelayBox
		[# Stato="fermo" #]
		emit trolley_state : trolley_state($Stato)
		println("FINE TRASFERIMENTO $Tipo_carico $Peso_carico")
		request waste_service -m other_load : other_load(x)
	}
	Transition t1 whenReply yes -> trasferimento_indoor
				whenReply no -> ritorno_home
	
				
	State ritorno_home{
		printCurrentMessage
		[# Stato="in_movimento" #]
		emit trolley_state : trolley_state($Stato)
		println("RITORNO HOME...")
		delayVar DelayHome
	}
	Goto home
}

QActor waste_service context ctxWasteService{
	//I VALORI 200 sarebbero MAXPB e MAXGB
	[#
		var MAXPB = 10
		var MAXPG = 10
		var Kg_plastica=MAXPB
		var Kg_vetro=MAXPG
		var Trolley_occupato=false	
		var Carico_accettato = false
		var Tipo_carico = ""
		var Peso_carico = 0
	#]
	
	State start initial{
		printCurrentMessage
		println("WASTE SERVICE, avvio")
	}
	Goto attesa_camion
	
	State attesa_camion{
		println("WASTE SERVICE, attesa camion")
		onMsg (other_load : other_load(ARG)){
			[# Trolley_occupato = false #]
			replyTo other_load with no : no(ARG)
		}
	}
	Transition t0 whenRequest load_req -> gestisci_richiesta
					whenRequest other_load -> attesa_camion
	
	State gestisci_richiesta{
		printCurrentMessage
		println("WASTE SERVICE, gestisco la richiesta arrivata")
		onMsg(load_req : load_req(TIPO, PESO)){
			[#
				Tipo_carico = payloadArg(0)
				Peso_carico = payloadArg(1).toInt()
			#]
			if [# Tipo_carico.equals("P") #]{
				if [#Kg_plastica-Peso_carico>=0#]{
					//loadaccepted
					replyTo load_req with loadaccepted : loadaccepted($Tipo_carico, $Peso_carico)
					[#
						Kg_plastica = Kg_plastica - Peso_carico
						Carico_accettato=true
					#]
				}
				else{
					//loadrejected
					replyTo load_req with loadrejected : loadrejected($Tipo_carico, $Peso_carico)
					[#
						Carico_accettato=false
					#]
				}
			}
			else {
				if [# Tipo_carico.equals("G") #] {
					if [#Kg_vetro-Peso_carico>=0#]{
						replyTo load_req with loadaccepted : loadaccepted($Tipo_carico, $Peso_carico)
					[#
						Kg_vetro = Kg_vetro - Peso_carico
						Carico_accettato=true
					#]
					}
					else{
						replyTo load_req with loadrejected : loadrejected($Tipo_carico, $Peso_carico)
						[#
							Carico_accettato=false
						#]
					}
				}
				else{
					println("WASTE SERVICE TIPO SBAGLIATO")
				}
			}
		}
		
	}
	Goto gestione_trolley if [# Carico_accettato #] else attesa_camion 
	
	
	State gestione_trolley{
		//battezzo (6,0) come coordinate del glass box e (6,6) come coordinate del plastic box
		printCurrentMessage
		//println("WASTE SERVICE gestisco il trolley")
		if [# Trolley_occupato.equals(false) #]{
			println("gestione_trolley trolley libero")
			if [# Tipo_carico.equals("G") #]{
				//vetro
				forward trolley -m start_trasf : start_trasf(6,0,$Tipo_carico, $Peso_carico)
			}
			else{
				//plastica
				forward trolley -m start_trasf : start_trasf(6,6,$Tipo_carico, $Peso_carico)
			}
			
			
		}
	}
	Goto trolley_occupato if [# Trolley_occupato #] else attesa_trolley
	
	State trolley_occupato{
		printCurrentMessage
		println("WASTE SERVICE il trolley al momento occupato")
	}
	Transition t2 whenRequest other_load -> attesa_trolley
	
	State attesa_trolley{
		printCurrentMessage
		println("WASTE SERVICE attendo il trolley")
		onMsg (other_load: other_load(ARG)){
			if [# Tipo_carico.equals("P") #]{
				replyTo other_load with yes : yes(6,6,$Tipo_carico, $Peso_carico)
			}
			else{
				replyTo other_load with yes : yes(6,0,$Tipo_carico, $Peso_carico)
			}
		}
		//è giusto mettere qua trolley occupato?
		[#
			Trolley_occupato = true
			var Kg_occ_p = MAXPB-Kg_plastica
			var Kg_occ_g = MAXPG-Kg_vetro
		#]
		emit waste_state:waste_state($Kg_occ_p, $Kg_occ_g)
	}
	Transition t1 whenEvent load_pickup -> attesa_camion
	
}
 
// QActor wastetruckmock context ctxWasteService {
//	State start initial {
//		printCurrentMessage
//		println("WASTE TRUCK | START")
//	} Goto camion1_req
//	
//	State camion1_req {
//		printCurrentMessage
//		println("WASTE TRUCK | CAMION 1 REQ (GLASS, 8)")
//		request waste_service -m load_req : load_req(G, 8)
//	} Transition t7 whenReply loadaccepted -> camion1_accepted
//					whenReply loadrejected -> not_as_planned
//					
//	State camion1_accepted {
//		printCurrentMessage
//		println("WASTE TRUCK | CAMION 1 ACCETTATO")
//	} Transition t0 whenEvent load_pickup -> camion1_terminazione
//	
//	State camion1_terminazione {
//		printCurrentMessage
//		println("WASTE TRUCK | CAMION 1 TERMINA")
//	} Goto camion2_req
//	
//	State camion2_req {
//		printCurrentMessage
//		
//		println("WASTE TRUCK | CAMION 2 REQ (GLASS, 3)")
//		request waste_service -m load_req : load_req(G, 3)
//	} Transition t1 whenReply loadrejected -> camion2_rejected
//					whenReply loadaccepted -> not_as_planned
//					
//	State camion2_rejected {
//		printCurrentMessage
//		println("WASTE TRUCK | CAMION 2 REJECTED")
//	} Goto camion3_req
//	
//	State camion3_req {
//		printCurrentMessage
//		delay 250
//		println("WASTE TRUCK | CAMION 3 REQ (PLASTIC, 4)")
//		request waste_service -m load_req : load_req(P, 4)
//	} Transition t2 whenReply loadaccepted -> camion4_req
//					whenReply loadrejected -> not_as_planned
//					
//	State camion4_req {
//		printCurrentMessage
//		delay 250
//		println("WASTE TRUCK | CAMION 4 REQ (PLASTIC, 3)")
//		request waste_service -m load_req : load_req(P, 3)
//	} Transition t3 whenReply loadaccepted -> camion5_req
//					whenReply loadrejected -> not_as_planned
//				
//	State camion5_req {
//		printCurrentMessage
//		delay 250
//		println("WASTE TRUCK | CAMION 5 REQ (PLASTIC, 8)")
//		request waste_service -m load_req : load_req(P, 8)
//	} Transition t4 whenReply loadrejected -> camion3_accepted
//					whenReply loadaccepted -> not_as_planned
//	
//	State camion3_accepted {
//		printCurrentMessage
//		println("WASTE TRUCK | CAMION 3 ACCETTATO")
//	} Transition t5 whenEvent load_pickup -> camion3_terminazione
//	
//	State camion3_terminazione {
//		printCurrentMessage
//		println("WASTE TRUCK | CAMION 3 TERMINA")
//	} Goto camion4_accepted
//	
//	State camion4_accepted {
//		printCurrentMessage
//		println("WASTE TRUCK | CAMION 4 ACCETTATO")
//	} Transition t6 whenEvent load_pickup -> camion4_terminazione
//	
//	State camion4_terminazione {
//		printCurrentMessage
//		println("WASTE TRUCK | CAMION 4 TERMINA")
//	} Goto fine
//	
//	State fine {
//		printCurrentMessage
//		println("WASTE TRUCK | FINE!")
//	}				
//	
//	
//	State not_as_planned {
//		printCurrentMessage 
//		println("WASTE TRUCK | ERRORE!!!!!")
//	} 
//}

 QActor wastetruckmock context ctxWasteService {
	State start initial {
		printCurrentMessage
		println("WASTE TRUCK | START")
	} Goto camion1_req
	
	State camion1_req {
		printCurrentMessage
		println("WASTE TRUCK | CAMION 1 REQ (GLASS, 8)")
		request waste_service -m load_req : load_req(G, 8)
	} Transition t7 whenReply loadaccepted -> camion1_accepted
					whenReply loadrejected -> not_as_planned
					
	State camion1_accepted {
		printCurrentMessage
		println("WASTE TRUCK | CAMION 1 ACCETTATO")
	} Transition t0 whenEvent load_pickup -> camion1_terminazione
	
	State camion1_terminazione {
		printCurrentMessage
		println("WASTE TRUCK | CAMION 1 TERMINA")
	} Goto camion2_req
	
	State camion2_req {
		printCurrentMessage
		
		println("WASTE TRUCK | CAMION 2 REQ (GLASS, 3)")
		request waste_service -m load_req : load_req(G, 3)
	} Transition t1 whenReply loadrejected -> camion2_rejected
					whenReply loadaccepted -> not_as_planned
					
	State camion2_rejected {
		printCurrentMessage
		println("WASTE TRUCK | CAMION 2 REJECTED")
	} Goto camion3_req
	
	State camion3_req {
		printCurrentMessage
		delay 250
		println("WASTE TRUCK | CAMION 3 REQ (PLASTIC, 4)")
		request waste_service -m load_req : load_req(P, 4)
	} Transition t2 whenReply loadaccepted -> camion3_accepted
					whenReply loadrejected -> not_as_planned
							
	State camion3_accepted {
		printCurrentMessage
		println("WASTE TRUCK | CAMION 3 ACCETTATO")
	} Transition t5 whenEvent load_pickup -> camion3_terminazione
	
	State camion3_terminazione {
		printCurrentMessage
		println("WASTE TRUCK | CAMION 3 TERMINA")
	} Goto fine
	
	State fine {
		printCurrentMessage
		println("WASTE TRUCK | FINE!")
	}				
	
	
	State not_as_planned {
		printCurrentMessage 
		println("WASTE TRUCK | ERRORE!!!!!")
	} 
}

QActor wastetruckmock2 context ctxWasteService{
	State start initial {
		printCurrentMessage
		println("WASTE TRUCK 2 | START")
		delay 4000
	} Goto camion4_req
	
	State camion4_req {
		printCurrentMessage
		delay 250
		println("WASTE TRUCK 2| CAMION 4 REQ (PLASTIC, 3)")
		request waste_service -m load_req : load_req(P, 3)
	}Transition t0 whenReply loadaccepted -> camion4_accepted
					whenReply loadrejected -> not_as_planned
	
	State camion4_accepted{
		println("WASTE TRUCK 2 | CAMION 4 ACCETTATO")
	}Transition t1 whenEvent load_pickup -> camion4_terminazione
	
	State camion4_terminazione {
		printCurrentMessage
		println("WASTE TRUCK 2| CAMION 4 TERMINA")
	} Goto fine
	
	State not_as_planned {
		printCurrentMessage 
		println("WASTE TRUCK 2| ERRORE!!!!!")
	} 
	
	State fine {
		printCurrentMessage
		println("WASTE TRUCK 2| FINE!")
	}			
}

QActor wastetruckmock3 context ctxWasteService{
	State start initial {
		printCurrentMessage
		println("WASTE TRUCK 3 | START")
		delay 4000
	} Goto camion5_req
	
	State camion5_req {
		printCurrentMessage
		delay 250
		println("WASTE TRUCK 3| CAMION 5 REQ (PLASTIC, 8)")
		request waste_service -m load_req : load_req(P, 8)
	}Transition t0 whenReply loadrejected -> camion5_accepted
					whenReply loadaccepted -> not_as_planned
	
	State camion5_accepted{
		println("WASTE TRUCK 3 | CAMION 5 rifiutato")
	}Goto camion5_terminazione
	
	State camion5_terminazione {
		printCurrentMessage
		println("WASTE TRUCK 3| CAMION 5 TERMINA")
	} Goto fine
	
	State not_as_planned {
		printCurrentMessage 
		println("WASTE TRUCK 3| ERRORE!!!!!")
	} 
	
	State fine {
		printCurrentMessage
		println("WASTE TRUCK 3| FINE!")
	}			
}

