/* Generated by AN DISI Unibo */ 
package it.unibo.utilizzatoremock

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Utilizzatoremock ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "start"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("start") { //this:State
					action { //it:State
						println(" MOCK | START")
					}
					 transition( edgeName="goto",targetState="on", cond=doswitch() )
				}	 
				state("on") { //this:State
					action { //it:State
						forward("cmd", "cmd(on)" ,"led" ) 
						stateTimer = TimerActor("timer_on", 
							scope, context!!, "local_tout_utilizzatoremock_on", 2000.toLong() )
					}
					 transition(edgeName="t03",targetState="off",cond=whenTimeout("local_tout_utilizzatoremock_on"))   
				}	 
				state("off") { //this:State
					action { //it:State
						forward("cmd", "cmd(off)" ,"led" ) 
						stateTimer = TimerActor("timer_off", 
							scope, context!!, "local_tout_utilizzatoremock_off", 2000.toLong() )
					}
					 transition(edgeName="t04",targetState="blink",cond=whenTimeout("local_tout_utilizzatoremock_off"))   
				}	 
				state("blink") { //this:State
					action { //it:State
						forward("cmd", "cmd(blink)" ,"led" ) 
						stateTimer = TimerActor("timer_blink", 
							scope, context!!, "local_tout_utilizzatoremock_blink", 5000.toLong() )
					}
					 transition(edgeName="t05",targetState="fine",cond=whenTimeout("local_tout_utilizzatoremock_blink"))   
				}	 
				state("fine") { //this:State
					action { //it:State
						forward("cmd", "cmd(off)" ,"led" ) 
					}
				}	 
			}
		}
}
