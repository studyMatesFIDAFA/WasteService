System /*-trace*/ sonar
//mqttBroker "broker.hivemq.com" : 1883  eventTopic "unibo/nat/radar"

//SONAR 
Dispatch sonaractivate   : info(ARG)
Dispatch sonardeactivate : info(ARG)
Event    sonar           : distance( V )   //emitted by sonarSimulator or sonardatasource	
Event    sonardata       : distance( V )   //for the application level
Event obstacle : obstacle(V)
Event noobstacle : noobstacle(V)


//Context ctxanalisiproblema ip [host="127.0.0.1" port=8078] 
// mettere ip del proprio pc
//Context ctxanalisiproblema ip [host="169.254.239.199" port=8078]
Context ctxanalisiproblema ip [host="10.5.5.1" port=8078]  
Context ctxsonar ip [host="localhost" port=8079] 

//DATA SOURCES
CodedQActor sonarsimulator  context ctxsonar className "sonarSimulator"  
CodedQActor sonardatasource context ctxsonar className "sonarHCSR04Support2021"

/*
 * Actors for the sonar-data handling pipe
 * NOTE : we do not use the it.unibo`.radarSystem22.domain
 * we could do it by introducing an observer that emits the event
 */
//CodedQActor datalogger     context ctxsonaronrasp className "dataLogger"
CodedQActor datacleaner    context ctxsonar className "dataCleaner"
CodedQActor distancefilter context ctxsonar className "distanceFilter"


QActor sonarqak22 context ctxsonar{
	[# val simulate       = false
	   val sonarActorName = "sonarqak22"
	   val usingDomain    = false
	#]
	State s0 initial {
		//printCurrentMessage
		run  sonarConfig.configureTheSonar(simulate, sonarActorName, usingDomain)
		 
		//ASSUMPTION: the sonar subsystem emits the event sonar:distance(V)
	}
	Transition t0 whenMsg sonaractivate   -> activateTheSonar
			      whenMsg sonardeactivate -> deactivateTheSonar
	
	State activateTheSonar{
		printCurrentMessage
		if[# simulate #]{
			forward sonarsimulator -m sonaractivate : info(ok) 
			//run sonarConfig.activateSonarSimulated() //usingDomain
		}else {
			 forward sonardatasource -m sonaractivate : info(ok)  
		}
	}
	Transition t0  whenEvent sonar         -> handleSonarData  
	               whenMsg sonardeactivate -> deactivateTheSonar
	
	State deactivateTheSonar{
		printCurrentMessage
	}
	Goto end
 
  	State handleSonarData{
  		 onMsg( sonar : distance(D) ){
   		 	[# val D = payloadArg(0) #]  
  		    //println("%%%%%%%%%%%%%%%%%%%%%%%%%%% emit %%%%%%%%%%%%%%% ${D}")
  		 	emit sonardata : distance($D) //for the application
  		 }
  	}
   	Transition t0 whenEvent sonar -> handleSonarData
   				  whenMsg sonardeactivate -> deactivateTheSonar
   		
	State end{ 
		println("sonarqak22 BYE")
		[# System.exit(0) #]
	}
}

QActor sonarmastermock context ctxsonar{
	State s0 initial {
		forward sonarqak22 -m sonaractivate : info(ok)
//		delay 20000 
//		forward sonarqak22 -m sonardeactivate : info(ok)
	}
} 